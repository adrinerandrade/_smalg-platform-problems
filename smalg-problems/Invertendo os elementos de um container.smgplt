{"id":"20875473-8485-4632-8cb6-bc8fd79b4a34","name":"Invertendo os elementos de um container","description":"<p>  Containers, na plataforma, são elementos que possuem um tamanho pré-determinado e com posições indexadas. O objetivo aqui será simples. </p><p>\t</p><p>  Você receberá um container com 'n' posições e você deverá inverter as posições de todos os seus elementos. Desse modo, o elemento que se encontra na primeira posição deverá ir para a última, o segundo para a penúltima e assim por diante.</p><p><br></p><p>  Utilize os métodos get e set para trabalhar com o container.</p><p><br></p>","classContract":{"name":"ProblemaDeInversao","fields":[],"methods":[{"name":"inverter","parameters":"vetor","description":"Recebe um container/vetor para ter os seus elementos invertidos"}]},"scenarios":[{"id":"39223bea-2659-4ba1-949c-a58544ebf20e","name":"Inverter","description":"Este cenário adiciona 6 elementos na lista. O crescimento do vetor deve ser sempre o dobro do tamanho anterior.","code":"const container = context.newContainer(5);\r\ncontainer.set(0, 5);\r\ncontainer.set(1, 5);\r\ncontainer.set(2, 1);\r\ncontainer.set(3, 4);\r\ncontainer.set(4, 2);\r\n\r\nproblemaDeInversao.inverter(container);\r\n\r\nassertion.assertEquals(2, container.container[0], 'O primeiro elemento está errado');\r\nassertion.assertEquals(4, container.container[1], 'O segundo elemento está errado');\r\nassertion.assertEquals(1, container.container[2], 'O terceiro elemento está errado');\r\nassertion.assertEquals(5, container.container[3], 'O quarto elemento está errado');\r\nassertion.assertEquals(5, container.container[4], 'O quinto elemento está errado');"}],"solution":"class ProblemaDeInversao {\n\n\tconstructor() {}\n\n\t/**\n\t * Recebe um vetor e realiza a inversão dos seus elementos baseando em suas posições.\n\t */\n\tinverter(vetor) {\n\t\tconst tamanhoVetor = vetor.size();\n\t\tfor (let indice = 0; indice < (tamanhoVetor - 1) / 2; indice++) {\n\t\t\tconst indiceInverso = vetor.size() - 1 - indice;\n\t\t\tconst elementoIndice = vetor.get(indice);\n\t\t\tconst elementoInverso = vetor.get(indiceInverso);\n\t\t\tvetor.set(indiceInverso, elementoIndice);\n\t\t\tvetor.set(indice, elementoInverso);\n\t\t}\n\t}\n\n}"}